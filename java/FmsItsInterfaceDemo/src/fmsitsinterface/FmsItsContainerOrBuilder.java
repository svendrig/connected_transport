// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: FMS_ITS_Interface_Specification.proto

package fmsitsinterface;

public interface FmsItsContainerOrBuilder extends
    // @@protoc_insertion_point(interface_extends:fmsitsinterface.FmsItsContainer)
    com.google.protobuf.MessageOrBuilder {

  /**
   * <pre>
   * Request/response message to check time synchronisation between 2 systems
   * </pre>
   *
   * <code>.fmsitsinterface.TimestampMessage timestamp_message = 1;</code>
   * @return Whether the timestampMessage field is set.
   */
  boolean hasTimestampMessage();
  /**
   * <pre>
   * Request/response message to check time synchronisation between 2 systems
   * </pre>
   *
   * <code>.fmsitsinterface.TimestampMessage timestamp_message = 1;</code>
   * @return The timestampMessage.
   */
  fmsitsinterface.TimestampMessage getTimestampMessage();
  /**
   * <pre>
   * Request/response message to check time synchronisation between 2 systems
   * </pre>
   *
   * <code>.fmsitsinterface.TimestampMessage timestamp_message = 1;</code>
   */
  fmsitsinterface.TimestampMessageOrBuilder getTimestampMessageOrBuilder();

  /**
   * <pre>
   * CSP to Vehicle: General information about the message not related to the event itself.
   * </pre>
   *
   * <code>.fmsitsinterface.InfoContainer info_container = 2;</code>
   * @return Whether the infoContainer field is set.
   */
  boolean hasInfoContainer();
  /**
   * <pre>
   * CSP to Vehicle: General information about the message not related to the event itself.
   * </pre>
   *
   * <code>.fmsitsinterface.InfoContainer info_container = 2;</code>
   * @return The infoContainer.
   */
  fmsitsinterface.InfoContainer getInfoContainer();
  /**
   * <pre>
   * CSP to Vehicle: General information about the message not related to the event itself.
   * </pre>
   *
   * <code>.fmsitsinterface.InfoContainer info_container = 2;</code>
   */
  fmsitsinterface.InfoContainerOrBuilder getInfoContainerOrBuilder();

  /**
   * <pre>
   * CSP to Vehicle: More information about the content of the event.
   * </pre>
   *
   * <code>.fmsitsinterface.ContentContainer content_container = 3;</code>
   * @return Whether the contentContainer field is set.
   */
  boolean hasContentContainer();
  /**
   * <pre>
   * CSP to Vehicle: More information about the content of the event.
   * </pre>
   *
   * <code>.fmsitsinterface.ContentContainer content_container = 3;</code>
   * @return The contentContainer.
   */
  fmsitsinterface.ContentContainer getContentContainer();
  /**
   * <pre>
   * CSP to Vehicle: More information about the content of the event.
   * </pre>
   *
   * <code>.fmsitsinterface.ContentContainer content_container = 3;</code>
   */
  fmsitsinterface.ContentContainerOrBuilder getContentContainerOrBuilder();

  /**
   * <pre>
   * FMS Vehicle to CSP: container used to convey location updates
   * </pre>
   *
   * <code>.fmsitsinterface.LocationUpdateEvent location_update = 4;</code>
   * @return Whether the locationUpdate field is set.
   */
  boolean hasLocationUpdate();
  /**
   * <pre>
   * FMS Vehicle to CSP: container used to convey location updates
   * </pre>
   *
   * <code>.fmsitsinterface.LocationUpdateEvent location_update = 4;</code>
   * @return The locationUpdate.
   */
  fmsitsinterface.LocationUpdateEvent getLocationUpdate();
  /**
   * <pre>
   * FMS Vehicle to CSP: container used to convey location updates
   * </pre>
   *
   * <code>.fmsitsinterface.LocationUpdateEvent location_update = 4;</code>
   */
  fmsitsinterface.LocationUpdateEventOrBuilder getLocationUpdateOrBuilder();

  /**
   * <pre>
   * In case messages cannot be handled, this message is used to inform the original sender
   * </pre>
   *
   * <code>.fmsitsinterface.ErrorMessage error_message = 5;</code>
   * @return Whether the errorMessage field is set.
   */
  boolean hasErrorMessage();
  /**
   * <pre>
   * In case messages cannot be handled, this message is used to inform the original sender
   * </pre>
   *
   * <code>.fmsitsinterface.ErrorMessage error_message = 5;</code>
   * @return The errorMessage.
   */
  fmsitsinterface.ErrorMessage getErrorMessage();
  /**
   * <pre>
   * In case messages cannot be handled, this message is used to inform the original sender
   * </pre>
   *
   * <code>.fmsitsinterface.ErrorMessage error_message = 5;</code>
   */
  fmsitsinterface.ErrorMessageOrBuilder getErrorMessageOrBuilder();
}
