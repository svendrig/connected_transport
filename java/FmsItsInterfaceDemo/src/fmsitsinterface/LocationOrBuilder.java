// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: FMS_ITS_Interface_Specification.proto

package fmsitsinterface;

public interface LocationOrBuilder extends
    // @@protoc_insertion_point(interface_extends:fmsitsinterface.Location)
    com.google.protobuf.MessageOrBuilder {

  /**
   * <pre>
   * list of coordinates to represent location of event or desired frequency zone.
   * </pre>
   *
   * <code>repeated .fmsitsinterface.Point coordinates = 1;</code>
   */
  java.util.List<fmsitsinterface.Point> 
      getCoordinatesList();
  /**
   * <pre>
   * list of coordinates to represent location of event or desired frequency zone.
   * </pre>
   *
   * <code>repeated .fmsitsinterface.Point coordinates = 1;</code>
   */
  fmsitsinterface.Point getCoordinates(int index);
  /**
   * <pre>
   * list of coordinates to represent location of event or desired frequency zone.
   * </pre>
   *
   * <code>repeated .fmsitsinterface.Point coordinates = 1;</code>
   */
  int getCoordinatesCount();
  /**
   * <pre>
   * list of coordinates to represent location of event or desired frequency zone.
   * </pre>
   *
   * <code>repeated .fmsitsinterface.Point coordinates = 1;</code>
   */
  java.util.List<? extends fmsitsinterface.PointOrBuilder> 
      getCoordinatesOrBuilderList();
  /**
   * <pre>
   * list of coordinates to represent location of event or desired frequency zone.
   * </pre>
   *
   * <code>repeated .fmsitsinterface.Point coordinates = 1;</code>
   */
  fmsitsinterface.PointOrBuilder getCoordinatesOrBuilder(
      int index);

  /**
   * <pre>
   * type of coordinates field
   * </pre>
   *
   * <code>.fmsitsinterface.Location.CoordinatesType coordinates_type = 2;</code>
   * @return The enum numeric value on the wire for coordinatesType.
   */
  int getCoordinatesTypeValue();
  /**
   * <pre>
   * type of coordinates field
   * </pre>
   *
   * <code>.fmsitsinterface.Location.CoordinatesType coordinates_type = 2;</code>
   * @return The coordinatesType.
   */
  fmsitsinterface.Location.CoordinatesType getCoordinatesType();

  /**
   * <pre>
   * driving direction for which the event is relevant. If relevant for all directions, this field is unused
   * </pre>
   *
   * <code>.fmsitsinterface.MeasurementType heading = 3;</code>
   * @return Whether the heading field is set.
   */
  boolean hasHeading();
  /**
   * <pre>
   * driving direction for which the event is relevant. If relevant for all directions, this field is unused
   * </pre>
   *
   * <code>.fmsitsinterface.MeasurementType heading = 3;</code>
   * @return The heading.
   */
  fmsitsinterface.MeasurementType getHeading();
  /**
   * <pre>
   * driving direction for which the event is relevant. If relevant for all directions, this field is unused
   * </pre>
   *
   * <code>.fmsitsinterface.MeasurementType heading = 3;</code>
   */
  fmsitsinterface.MeasurementTypeOrBuilder getHeadingOrBuilder();
}
