// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: FMS_ITS_Interface_Specification.proto

package fmsitsinterface;

/**
 * Protobuf enum {@code fmsitsinterface.MeasurementUnit}
 */
public enum MeasurementUnit
    implements com.google.protobuf.ProtocolMessageEnum {
  /**
   * <code>UNKNOWN = 0;</code>
   */
  UNKNOWN(0),
  /**
   * <pre>
   * speed units
   * </pre>
   *
   * <code>KILOMETERS_PER_HOUR = 10;</code>
   */
  KILOMETERS_PER_HOUR(10),
  /**
   * <code>METERS_PER_SECOND = 11;</code>
   */
  METERS_PER_SECOND(11),
  /**
   * <pre>
   * mass units
   * </pre>
   *
   * <code>KILOGRAM = 20;</code>
   */
  KILOGRAM(20),
  /**
   * <code>POUND = 21;</code>
   */
  POUND(21),
  /**
   * <pre>
   * length / height units
   * </pre>
   *
   * <code>METER = 30;</code>
   */
  METER(30),
  /**
   * <code>CENTIMETER = 31;</code>
   */
  CENTIMETER(31),
  /**
   * <pre>
   * time units
   * </pre>
   *
   * <code>MILLISECOND = 40;</code>
   */
  MILLISECOND(40),
  /**
   * <code>SECOND = 41;</code>
   */
  SECOND(41),
  /**
   * <code>MINUTE = 42;</code>
   */
  MINUTE(42),
  /**
   * <code>HOUR = 43;</code>
   */
  HOUR(43),
  /**
   * <pre>
   * heading / bearing units
   * </pre>
   *
   * <code>DEGREES = 50;</code>
   */
  DEGREES(50),
  UNRECOGNIZED(-1),
  ;

  /**
   * <code>UNKNOWN = 0;</code>
   */
  public static final int UNKNOWN_VALUE = 0;
  /**
   * <pre>
   * speed units
   * </pre>
   *
   * <code>KILOMETERS_PER_HOUR = 10;</code>
   */
  public static final int KILOMETERS_PER_HOUR_VALUE = 10;
  /**
   * <code>METERS_PER_SECOND = 11;</code>
   */
  public static final int METERS_PER_SECOND_VALUE = 11;
  /**
   * <pre>
   * mass units
   * </pre>
   *
   * <code>KILOGRAM = 20;</code>
   */
  public static final int KILOGRAM_VALUE = 20;
  /**
   * <code>POUND = 21;</code>
   */
  public static final int POUND_VALUE = 21;
  /**
   * <pre>
   * length / height units
   * </pre>
   *
   * <code>METER = 30;</code>
   */
  public static final int METER_VALUE = 30;
  /**
   * <code>CENTIMETER = 31;</code>
   */
  public static final int CENTIMETER_VALUE = 31;
  /**
   * <pre>
   * time units
   * </pre>
   *
   * <code>MILLISECOND = 40;</code>
   */
  public static final int MILLISECOND_VALUE = 40;
  /**
   * <code>SECOND = 41;</code>
   */
  public static final int SECOND_VALUE = 41;
  /**
   * <code>MINUTE = 42;</code>
   */
  public static final int MINUTE_VALUE = 42;
  /**
   * <code>HOUR = 43;</code>
   */
  public static final int HOUR_VALUE = 43;
  /**
   * <pre>
   * heading / bearing units
   * </pre>
   *
   * <code>DEGREES = 50;</code>
   */
  public static final int DEGREES_VALUE = 50;


  public final int getNumber() {
    if (this == UNRECOGNIZED) {
      throw new java.lang.IllegalArgumentException(
          "Can't get the number of an unknown enum value.");
    }
    return value;
  }

  /**
   * @param value The numeric wire value of the corresponding enum entry.
   * @return The enum associated with the given numeric wire value.
   * @deprecated Use {@link #forNumber(int)} instead.
   */
  @java.lang.Deprecated
  public static MeasurementUnit valueOf(int value) {
    return forNumber(value);
  }

  /**
   * @param value The numeric wire value of the corresponding enum entry.
   * @return The enum associated with the given numeric wire value.
   */
  public static MeasurementUnit forNumber(int value) {
    switch (value) {
      case 0: return UNKNOWN;
      case 10: return KILOMETERS_PER_HOUR;
      case 11: return METERS_PER_SECOND;
      case 20: return KILOGRAM;
      case 21: return POUND;
      case 30: return METER;
      case 31: return CENTIMETER;
      case 40: return MILLISECOND;
      case 41: return SECOND;
      case 42: return MINUTE;
      case 43: return HOUR;
      case 50: return DEGREES;
      default: return null;
    }
  }

  public static com.google.protobuf.Internal.EnumLiteMap<MeasurementUnit>
      internalGetValueMap() {
    return internalValueMap;
  }
  private static final com.google.protobuf.Internal.EnumLiteMap<
      MeasurementUnit> internalValueMap =
        new com.google.protobuf.Internal.EnumLiteMap<MeasurementUnit>() {
          public MeasurementUnit findValueByNumber(int number) {
            return MeasurementUnit.forNumber(number);
          }
        };

  public final com.google.protobuf.Descriptors.EnumValueDescriptor
      getValueDescriptor() {
    if (this == UNRECOGNIZED) {
      throw new java.lang.IllegalStateException(
          "Can't get the descriptor of an unrecognized enum value.");
    }
    return getDescriptor().getValues().get(ordinal());
  }
  public final com.google.protobuf.Descriptors.EnumDescriptor
      getDescriptorForType() {
    return getDescriptor();
  }
  public static final com.google.protobuf.Descriptors.EnumDescriptor
      getDescriptor() {
    return fmsitsinterface.FMSITSInterfaceSpecification.getDescriptor().getEnumTypes().get(2);
  }

  private static final MeasurementUnit[] VALUES = values();

  public static MeasurementUnit valueOf(
      com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
    if (desc.getType() != getDescriptor()) {
      throw new java.lang.IllegalArgumentException(
        "EnumValueDescriptor is not for this type.");
    }
    if (desc.getIndex() == -1) {
      return UNRECOGNIZED;
    }
    return VALUES[desc.getIndex()];
  }

  private final int value;

  private MeasurementUnit(int value) {
    this.value = value;
  }

  // @@protoc_insertion_point(enum_scope:fmsitsinterface.MeasurementUnit)
}

