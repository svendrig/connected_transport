// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: FMS_ITS_Interface_Specification.proto

package fmsitsinterface;

/**
 * Protobuf type {@code fmsitsinterface.OvertakingInfo}
 */
public final class OvertakingInfo extends
    com.google.protobuf.GeneratedMessageV3 implements
    // @@protoc_insertion_point(message_implements:fmsitsinterface.OvertakingInfo)
    OvertakingInfoOrBuilder {
private static final long serialVersionUID = 0L;
  // Use OvertakingInfo.newBuilder() to construct.
  private OvertakingInfo(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
    super(builder);
  }
  private OvertakingInfo() {
    applicableFor_ = java.util.Collections.emptyList();
    exceptFor_ = java.util.Collections.emptyList();
  }

  @java.lang.Override
  @SuppressWarnings({"unused"})
  protected java.lang.Object newInstance(
      UnusedPrivateParameter unused) {
    return new OvertakingInfo();
  }

  public static final com.google.protobuf.Descriptors.Descriptor
      getDescriptor() {
    return fmsitsinterface.FMSITSInterfaceSpecification.internal_static_fmsitsinterface_OvertakingInfo_descriptor;
  }

  @java.lang.Override
  protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internalGetFieldAccessorTable() {
    return fmsitsinterface.FMSITSInterfaceSpecification.internal_static_fmsitsinterface_OvertakingInfo_fieldAccessorTable
        .ensureFieldAccessorsInitialized(
            fmsitsinterface.OvertakingInfo.class, fmsitsinterface.OvertakingInfo.Builder.class);
  }

  /**
   * Protobuf enum {@code fmsitsinterface.OvertakingInfo.ApplicableVehicleType}
   */
  public enum ApplicableVehicleType
      implements com.google.protobuf.ProtocolMessageEnum {
    /**
     * <code>UNKNOWN_APPLICABLE_VEHICLE_TYPE = 0;</code>
     */
    UNKNOWN_APPLICABLE_VEHICLE_TYPE(0),
    /**
     * <pre>
     * any kind of motorized vehicle
     * </pre>
     *
     * <code>ALL_MOTORIZED = 1;</code>
     */
    ALL_MOTORIZED(1),
    /**
     * <pre>
     * all kinds of trucks
     * </pre>
     *
     * <code>HGV = 2;</code>
     */
    HGV(2),
    /**
     * <pre>
     * agricultural vehicles like tractors
     * </pre>
     *
     * <code>AGRICULTURE = 3;</code>
     */
    AGRICULTURE(3),
    /**
     * <code>MOPED = 4;</code>
     */
    MOPED(4),
    UNRECOGNIZED(-1),
    ;

    /**
     * <code>UNKNOWN_APPLICABLE_VEHICLE_TYPE = 0;</code>
     */
    public static final int UNKNOWN_APPLICABLE_VEHICLE_TYPE_VALUE = 0;
    /**
     * <pre>
     * any kind of motorized vehicle
     * </pre>
     *
     * <code>ALL_MOTORIZED = 1;</code>
     */
    public static final int ALL_MOTORIZED_VALUE = 1;
    /**
     * <pre>
     * all kinds of trucks
     * </pre>
     *
     * <code>HGV = 2;</code>
     */
    public static final int HGV_VALUE = 2;
    /**
     * <pre>
     * agricultural vehicles like tractors
     * </pre>
     *
     * <code>AGRICULTURE = 3;</code>
     */
    public static final int AGRICULTURE_VALUE = 3;
    /**
     * <code>MOPED = 4;</code>
     */
    public static final int MOPED_VALUE = 4;


    public final int getNumber() {
      if (this == UNRECOGNIZED) {
        throw new java.lang.IllegalArgumentException(
            "Can't get the number of an unknown enum value.");
      }
      return value;
    }

    /**
     * @param value The numeric wire value of the corresponding enum entry.
     * @return The enum associated with the given numeric wire value.
     * @deprecated Use {@link #forNumber(int)} instead.
     */
    @java.lang.Deprecated
    public static ApplicableVehicleType valueOf(int value) {
      return forNumber(value);
    }

    /**
     * @param value The numeric wire value of the corresponding enum entry.
     * @return The enum associated with the given numeric wire value.
     */
    public static ApplicableVehicleType forNumber(int value) {
      switch (value) {
        case 0: return UNKNOWN_APPLICABLE_VEHICLE_TYPE;
        case 1: return ALL_MOTORIZED;
        case 2: return HGV;
        case 3: return AGRICULTURE;
        case 4: return MOPED;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<ApplicableVehicleType>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static final com.google.protobuf.Internal.EnumLiteMap<
        ApplicableVehicleType> internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<ApplicableVehicleType>() {
            public ApplicableVehicleType findValueByNumber(int number) {
              return ApplicableVehicleType.forNumber(number);
            }
          };

    public final com.google.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
      if (this == UNRECOGNIZED) {
        throw new java.lang.IllegalStateException(
            "Can't get the descriptor of an unrecognized enum value.");
      }
      return getDescriptor().getValues().get(ordinal());
    }
    public final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
      return getDescriptor();
    }
    public static final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
      return fmsitsinterface.OvertakingInfo.getDescriptor().getEnumTypes().get(0);
    }

    private static final ApplicableVehicleType[] VALUES = values();

    public static ApplicableVehicleType valueOf(
        com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new java.lang.IllegalArgumentException(
          "EnumValueDescriptor is not for this type.");
      }
      if (desc.getIndex() == -1) {
        return UNRECOGNIZED;
      }
      return VALUES[desc.getIndex()];
    }

    private final int value;

    private ApplicableVehicleType(int value) {
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:fmsitsinterface.OvertakingInfo.ApplicableVehicleType)
  }

  public static final int APPLICABLE_FOR_FIELD_NUMBER = 1;
  @SuppressWarnings("serial")
  private java.util.List<java.lang.Integer> applicableFor_;
  private static final com.google.protobuf.Internal.ListAdapter.Converter<
      java.lang.Integer, fmsitsinterface.OvertakingInfo.ApplicableVehicleType> applicableFor_converter_ =
          new com.google.protobuf.Internal.ListAdapter.Converter<
              java.lang.Integer, fmsitsinterface.OvertakingInfo.ApplicableVehicleType>() {
            public fmsitsinterface.OvertakingInfo.ApplicableVehicleType convert(java.lang.Integer from) {
              fmsitsinterface.OvertakingInfo.ApplicableVehicleType result = fmsitsinterface.OvertakingInfo.ApplicableVehicleType.forNumber(from);
              return result == null ? fmsitsinterface.OvertakingInfo.ApplicableVehicleType.UNRECOGNIZED : result;
            }
          };
  /**
   * <code>repeated .fmsitsinterface.OvertakingInfo.ApplicableVehicleType applicable_for = 1;</code>
   * @return A list containing the applicableFor.
   */
  @java.lang.Override
  public java.util.List<fmsitsinterface.OvertakingInfo.ApplicableVehicleType> getApplicableForList() {
    return new com.google.protobuf.Internal.ListAdapter<
        java.lang.Integer, fmsitsinterface.OvertakingInfo.ApplicableVehicleType>(applicableFor_, applicableFor_converter_);
  }
  /**
   * <code>repeated .fmsitsinterface.OvertakingInfo.ApplicableVehicleType applicable_for = 1;</code>
   * @return The count of applicableFor.
   */
  @java.lang.Override
  public int getApplicableForCount() {
    return applicableFor_.size();
  }
  /**
   * <code>repeated .fmsitsinterface.OvertakingInfo.ApplicableVehicleType applicable_for = 1;</code>
   * @param index The index of the element to return.
   * @return The applicableFor at the given index.
   */
  @java.lang.Override
  public fmsitsinterface.OvertakingInfo.ApplicableVehicleType getApplicableFor(int index) {
    return applicableFor_converter_.convert(applicableFor_.get(index));
  }
  /**
   * <code>repeated .fmsitsinterface.OvertakingInfo.ApplicableVehicleType applicable_for = 1;</code>
   * @return A list containing the enum numeric values on the wire for applicableFor.
   */
  @java.lang.Override
  public java.util.List<java.lang.Integer>
  getApplicableForValueList() {
    return applicableFor_;
  }
  /**
   * <code>repeated .fmsitsinterface.OvertakingInfo.ApplicableVehicleType applicable_for = 1;</code>
   * @param index The index of the value to return.
   * @return The enum numeric value on the wire of applicableFor at the given index.
   */
  @java.lang.Override
  public int getApplicableForValue(int index) {
    return applicableFor_.get(index);
  }
  private int applicableForMemoizedSerializedSize;

  public static final int EXCEPT_FOR_FIELD_NUMBER = 2;
  @SuppressWarnings("serial")
  private java.util.List<java.lang.Integer> exceptFor_;
  private static final com.google.protobuf.Internal.ListAdapter.Converter<
      java.lang.Integer, fmsitsinterface.OvertakingInfo.ApplicableVehicleType> exceptFor_converter_ =
          new com.google.protobuf.Internal.ListAdapter.Converter<
              java.lang.Integer, fmsitsinterface.OvertakingInfo.ApplicableVehicleType>() {
            public fmsitsinterface.OvertakingInfo.ApplicableVehicleType convert(java.lang.Integer from) {
              fmsitsinterface.OvertakingInfo.ApplicableVehicleType result = fmsitsinterface.OvertakingInfo.ApplicableVehicleType.forNumber(from);
              return result == null ? fmsitsinterface.OvertakingInfo.ApplicableVehicleType.UNRECOGNIZED : result;
            }
          };
  /**
   * <code>repeated .fmsitsinterface.OvertakingInfo.ApplicableVehicleType except_for = 2;</code>
   * @return A list containing the exceptFor.
   */
  @java.lang.Override
  public java.util.List<fmsitsinterface.OvertakingInfo.ApplicableVehicleType> getExceptForList() {
    return new com.google.protobuf.Internal.ListAdapter<
        java.lang.Integer, fmsitsinterface.OvertakingInfo.ApplicableVehicleType>(exceptFor_, exceptFor_converter_);
  }
  /**
   * <code>repeated .fmsitsinterface.OvertakingInfo.ApplicableVehicleType except_for = 2;</code>
   * @return The count of exceptFor.
   */
  @java.lang.Override
  public int getExceptForCount() {
    return exceptFor_.size();
  }
  /**
   * <code>repeated .fmsitsinterface.OvertakingInfo.ApplicableVehicleType except_for = 2;</code>
   * @param index The index of the element to return.
   * @return The exceptFor at the given index.
   */
  @java.lang.Override
  public fmsitsinterface.OvertakingInfo.ApplicableVehicleType getExceptFor(int index) {
    return exceptFor_converter_.convert(exceptFor_.get(index));
  }
  /**
   * <code>repeated .fmsitsinterface.OvertakingInfo.ApplicableVehicleType except_for = 2;</code>
   * @return A list containing the enum numeric values on the wire for exceptFor.
   */
  @java.lang.Override
  public java.util.List<java.lang.Integer>
  getExceptForValueList() {
    return exceptFor_;
  }
  /**
   * <code>repeated .fmsitsinterface.OvertakingInfo.ApplicableVehicleType except_for = 2;</code>
   * @param index The index of the value to return.
   * @return The enum numeric value on the wire of exceptFor at the given index.
   */
  @java.lang.Override
  public int getExceptForValue(int index) {
    return exceptFor_.get(index);
  }
  private int exceptForMemoizedSerializedSize;

  private byte memoizedIsInitialized = -1;
  @java.lang.Override
  public final boolean isInitialized() {
    byte isInitialized = memoizedIsInitialized;
    if (isInitialized == 1) return true;
    if (isInitialized == 0) return false;

    memoizedIsInitialized = 1;
    return true;
  }

  @java.lang.Override
  public void writeTo(com.google.protobuf.CodedOutputStream output)
                      throws java.io.IOException {
    getSerializedSize();
    if (getApplicableForList().size() > 0) {
      output.writeUInt32NoTag(10);
      output.writeUInt32NoTag(applicableForMemoizedSerializedSize);
    }
    for (int i = 0; i < applicableFor_.size(); i++) {
      output.writeEnumNoTag(applicableFor_.get(i));
    }
    if (getExceptForList().size() > 0) {
      output.writeUInt32NoTag(18);
      output.writeUInt32NoTag(exceptForMemoizedSerializedSize);
    }
    for (int i = 0; i < exceptFor_.size(); i++) {
      output.writeEnumNoTag(exceptFor_.get(i));
    }
    getUnknownFields().writeTo(output);
  }

  @java.lang.Override
  public int getSerializedSize() {
    int size = memoizedSize;
    if (size != -1) return size;

    size = 0;
    {
      int dataSize = 0;
      for (int i = 0; i < applicableFor_.size(); i++) {
        dataSize += com.google.protobuf.CodedOutputStream
          .computeEnumSizeNoTag(applicableFor_.get(i));
      }
      size += dataSize;
      if (!getApplicableForList().isEmpty()) {  size += 1;
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32SizeNoTag(dataSize);
      }applicableForMemoizedSerializedSize = dataSize;
    }
    {
      int dataSize = 0;
      for (int i = 0; i < exceptFor_.size(); i++) {
        dataSize += com.google.protobuf.CodedOutputStream
          .computeEnumSizeNoTag(exceptFor_.get(i));
      }
      size += dataSize;
      if (!getExceptForList().isEmpty()) {  size += 1;
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32SizeNoTag(dataSize);
      }exceptForMemoizedSerializedSize = dataSize;
    }
    size += getUnknownFields().getSerializedSize();
    memoizedSize = size;
    return size;
  }

  @java.lang.Override
  public boolean equals(final java.lang.Object obj) {
    if (obj == this) {
     return true;
    }
    if (!(obj instanceof fmsitsinterface.OvertakingInfo)) {
      return super.equals(obj);
    }
    fmsitsinterface.OvertakingInfo other = (fmsitsinterface.OvertakingInfo) obj;

    if (!applicableFor_.equals(other.applicableFor_)) return false;
    if (!exceptFor_.equals(other.exceptFor_)) return false;
    if (!getUnknownFields().equals(other.getUnknownFields())) return false;
    return true;
  }

  @java.lang.Override
  public int hashCode() {
    if (memoizedHashCode != 0) {
      return memoizedHashCode;
    }
    int hash = 41;
    hash = (19 * hash) + getDescriptor().hashCode();
    if (getApplicableForCount() > 0) {
      hash = (37 * hash) + APPLICABLE_FOR_FIELD_NUMBER;
      hash = (53 * hash) + applicableFor_.hashCode();
    }
    if (getExceptForCount() > 0) {
      hash = (37 * hash) + EXCEPT_FOR_FIELD_NUMBER;
      hash = (53 * hash) + exceptFor_.hashCode();
    }
    hash = (29 * hash) + getUnknownFields().hashCode();
    memoizedHashCode = hash;
    return hash;
  }

  public static fmsitsinterface.OvertakingInfo parseFrom(
      java.nio.ByteBuffer data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static fmsitsinterface.OvertakingInfo parseFrom(
      java.nio.ByteBuffer data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static fmsitsinterface.OvertakingInfo parseFrom(
      com.google.protobuf.ByteString data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static fmsitsinterface.OvertakingInfo parseFrom(
      com.google.protobuf.ByteString data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static fmsitsinterface.OvertakingInfo parseFrom(byte[] data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static fmsitsinterface.OvertakingInfo parseFrom(
      byte[] data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static fmsitsinterface.OvertakingInfo parseFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static fmsitsinterface.OvertakingInfo parseFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }

  public static fmsitsinterface.OvertakingInfo parseDelimitedFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input);
  }

  public static fmsitsinterface.OvertakingInfo parseDelimitedFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
  }
  public static fmsitsinterface.OvertakingInfo parseFrom(
      com.google.protobuf.CodedInputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static fmsitsinterface.OvertakingInfo parseFrom(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }

  @java.lang.Override
  public Builder newBuilderForType() { return newBuilder(); }
  public static Builder newBuilder() {
    return DEFAULT_INSTANCE.toBuilder();
  }
  public static Builder newBuilder(fmsitsinterface.OvertakingInfo prototype) {
    return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
  }
  @java.lang.Override
  public Builder toBuilder() {
    return this == DEFAULT_INSTANCE
        ? new Builder() : new Builder().mergeFrom(this);
  }

  @java.lang.Override
  protected Builder newBuilderForType(
      com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
    Builder builder = new Builder(parent);
    return builder;
  }
  /**
   * Protobuf type {@code fmsitsinterface.OvertakingInfo}
   */
  public static final class Builder extends
      com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
      // @@protoc_insertion_point(builder_implements:fmsitsinterface.OvertakingInfo)
      fmsitsinterface.OvertakingInfoOrBuilder {
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return fmsitsinterface.FMSITSInterfaceSpecification.internal_static_fmsitsinterface_OvertakingInfo_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return fmsitsinterface.FMSITSInterfaceSpecification.internal_static_fmsitsinterface_OvertakingInfo_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              fmsitsinterface.OvertakingInfo.class, fmsitsinterface.OvertakingInfo.Builder.class);
    }

    // Construct using fmsitsinterface.OvertakingInfo.newBuilder()
    private Builder() {

    }

    private Builder(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      super(parent);

    }
    @java.lang.Override
    public Builder clear() {
      super.clear();
      bitField0_ = 0;
      applicableFor_ = java.util.Collections.emptyList();
      bitField0_ = (bitField0_ & ~0x00000001);
      exceptFor_ = java.util.Collections.emptyList();
      bitField0_ = (bitField0_ & ~0x00000002);
      return this;
    }

    @java.lang.Override
    public com.google.protobuf.Descriptors.Descriptor
        getDescriptorForType() {
      return fmsitsinterface.FMSITSInterfaceSpecification.internal_static_fmsitsinterface_OvertakingInfo_descriptor;
    }

    @java.lang.Override
    public fmsitsinterface.OvertakingInfo getDefaultInstanceForType() {
      return fmsitsinterface.OvertakingInfo.getDefaultInstance();
    }

    @java.lang.Override
    public fmsitsinterface.OvertakingInfo build() {
      fmsitsinterface.OvertakingInfo result = buildPartial();
      if (!result.isInitialized()) {
        throw newUninitializedMessageException(result);
      }
      return result;
    }

    @java.lang.Override
    public fmsitsinterface.OvertakingInfo buildPartial() {
      fmsitsinterface.OvertakingInfo result = new fmsitsinterface.OvertakingInfo(this);
      buildPartialRepeatedFields(result);
      if (bitField0_ != 0) { buildPartial0(result); }
      onBuilt();
      return result;
    }

    private void buildPartialRepeatedFields(fmsitsinterface.OvertakingInfo result) {
      if (((bitField0_ & 0x00000001) != 0)) {
        applicableFor_ = java.util.Collections.unmodifiableList(applicableFor_);
        bitField0_ = (bitField0_ & ~0x00000001);
      }
      result.applicableFor_ = applicableFor_;
      if (((bitField0_ & 0x00000002) != 0)) {
        exceptFor_ = java.util.Collections.unmodifiableList(exceptFor_);
        bitField0_ = (bitField0_ & ~0x00000002);
      }
      result.exceptFor_ = exceptFor_;
    }

    private void buildPartial0(fmsitsinterface.OvertakingInfo result) {
      int from_bitField0_ = bitField0_;
    }

    @java.lang.Override
    public Builder clone() {
      return super.clone();
    }
    @java.lang.Override
    public Builder setField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        java.lang.Object value) {
      return super.setField(field, value);
    }
    @java.lang.Override
    public Builder clearField(
        com.google.protobuf.Descriptors.FieldDescriptor field) {
      return super.clearField(field);
    }
    @java.lang.Override
    public Builder clearOneof(
        com.google.protobuf.Descriptors.OneofDescriptor oneof) {
      return super.clearOneof(oneof);
    }
    @java.lang.Override
    public Builder setRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        int index, java.lang.Object value) {
      return super.setRepeatedField(field, index, value);
    }
    @java.lang.Override
    public Builder addRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        java.lang.Object value) {
      return super.addRepeatedField(field, value);
    }
    @java.lang.Override
    public Builder mergeFrom(com.google.protobuf.Message other) {
      if (other instanceof fmsitsinterface.OvertakingInfo) {
        return mergeFrom((fmsitsinterface.OvertakingInfo)other);
      } else {
        super.mergeFrom(other);
        return this;
      }
    }

    public Builder mergeFrom(fmsitsinterface.OvertakingInfo other) {
      if (other == fmsitsinterface.OvertakingInfo.getDefaultInstance()) return this;
      if (!other.applicableFor_.isEmpty()) {
        if (applicableFor_.isEmpty()) {
          applicableFor_ = other.applicableFor_;
          bitField0_ = (bitField0_ & ~0x00000001);
        } else {
          ensureApplicableForIsMutable();
          applicableFor_.addAll(other.applicableFor_);
        }
        onChanged();
      }
      if (!other.exceptFor_.isEmpty()) {
        if (exceptFor_.isEmpty()) {
          exceptFor_ = other.exceptFor_;
          bitField0_ = (bitField0_ & ~0x00000002);
        } else {
          ensureExceptForIsMutable();
          exceptFor_.addAll(other.exceptFor_);
        }
        onChanged();
      }
      this.mergeUnknownFields(other.getUnknownFields());
      onChanged();
      return this;
    }

    @java.lang.Override
    public final boolean isInitialized() {
      return true;
    }

    @java.lang.Override
    public Builder mergeFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 8: {
              int tmpRaw = input.readEnum();
              ensureApplicableForIsMutable();
              applicableFor_.add(tmpRaw);
              break;
            } // case 8
            case 10: {
              int length = input.readRawVarint32();
              int oldLimit = input.pushLimit(length);
              while(input.getBytesUntilLimit() > 0) {
                int tmpRaw = input.readEnum();
                ensureApplicableForIsMutable();
                applicableFor_.add(tmpRaw);
              }
              input.popLimit(oldLimit);
              break;
            } // case 10
            case 16: {
              int tmpRaw = input.readEnum();
              ensureExceptForIsMutable();
              exceptFor_.add(tmpRaw);
              break;
            } // case 16
            case 18: {
              int length = input.readRawVarint32();
              int oldLimit = input.pushLimit(length);
              while(input.getBytesUntilLimit() > 0) {
                int tmpRaw = input.readEnum();
                ensureExceptForIsMutable();
                exceptFor_.add(tmpRaw);
              }
              input.popLimit(oldLimit);
              break;
            } // case 18
            default: {
              if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                done = true; // was an endgroup tag
              }
              break;
            } // default:
          } // switch (tag)
        } // while (!done)
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.unwrapIOException();
      } finally {
        onChanged();
      } // finally
      return this;
    }
    private int bitField0_;

    private java.util.List<java.lang.Integer> applicableFor_ =
      java.util.Collections.emptyList();
    private void ensureApplicableForIsMutable() {
      if (!((bitField0_ & 0x00000001) != 0)) {
        applicableFor_ = new java.util.ArrayList<java.lang.Integer>(applicableFor_);
        bitField0_ |= 0x00000001;
      }
    }
    /**
     * <code>repeated .fmsitsinterface.OvertakingInfo.ApplicableVehicleType applicable_for = 1;</code>
     * @return A list containing the applicableFor.
     */
    public java.util.List<fmsitsinterface.OvertakingInfo.ApplicableVehicleType> getApplicableForList() {
      return new com.google.protobuf.Internal.ListAdapter<
          java.lang.Integer, fmsitsinterface.OvertakingInfo.ApplicableVehicleType>(applicableFor_, applicableFor_converter_);
    }
    /**
     * <code>repeated .fmsitsinterface.OvertakingInfo.ApplicableVehicleType applicable_for = 1;</code>
     * @return The count of applicableFor.
     */
    public int getApplicableForCount() {
      return applicableFor_.size();
    }
    /**
     * <code>repeated .fmsitsinterface.OvertakingInfo.ApplicableVehicleType applicable_for = 1;</code>
     * @param index The index of the element to return.
     * @return The applicableFor at the given index.
     */
    public fmsitsinterface.OvertakingInfo.ApplicableVehicleType getApplicableFor(int index) {
      return applicableFor_converter_.convert(applicableFor_.get(index));
    }
    /**
     * <code>repeated .fmsitsinterface.OvertakingInfo.ApplicableVehicleType applicable_for = 1;</code>
     * @param index The index to set the value at.
     * @param value The applicableFor to set.
     * @return This builder for chaining.
     */
    public Builder setApplicableFor(
        int index, fmsitsinterface.OvertakingInfo.ApplicableVehicleType value) {
      if (value == null) {
        throw new NullPointerException();
      }
      ensureApplicableForIsMutable();
      applicableFor_.set(index, value.getNumber());
      onChanged();
      return this;
    }
    /**
     * <code>repeated .fmsitsinterface.OvertakingInfo.ApplicableVehicleType applicable_for = 1;</code>
     * @param value The applicableFor to add.
     * @return This builder for chaining.
     */
    public Builder addApplicableFor(fmsitsinterface.OvertakingInfo.ApplicableVehicleType value) {
      if (value == null) {
        throw new NullPointerException();
      }
      ensureApplicableForIsMutable();
      applicableFor_.add(value.getNumber());
      onChanged();
      return this;
    }
    /**
     * <code>repeated .fmsitsinterface.OvertakingInfo.ApplicableVehicleType applicable_for = 1;</code>
     * @param values The applicableFor to add.
     * @return This builder for chaining.
     */
    public Builder addAllApplicableFor(
        java.lang.Iterable<? extends fmsitsinterface.OvertakingInfo.ApplicableVehicleType> values) {
      ensureApplicableForIsMutable();
      for (fmsitsinterface.OvertakingInfo.ApplicableVehicleType value : values) {
        applicableFor_.add(value.getNumber());
      }
      onChanged();
      return this;
    }
    /**
     * <code>repeated .fmsitsinterface.OvertakingInfo.ApplicableVehicleType applicable_for = 1;</code>
     * @return This builder for chaining.
     */
    public Builder clearApplicableFor() {
      applicableFor_ = java.util.Collections.emptyList();
      bitField0_ = (bitField0_ & ~0x00000001);
      onChanged();
      return this;
    }
    /**
     * <code>repeated .fmsitsinterface.OvertakingInfo.ApplicableVehicleType applicable_for = 1;</code>
     * @return A list containing the enum numeric values on the wire for applicableFor.
     */
    public java.util.List<java.lang.Integer>
    getApplicableForValueList() {
      return java.util.Collections.unmodifiableList(applicableFor_);
    }
    /**
     * <code>repeated .fmsitsinterface.OvertakingInfo.ApplicableVehicleType applicable_for = 1;</code>
     * @param index The index of the value to return.
     * @return The enum numeric value on the wire of applicableFor at the given index.
     */
    public int getApplicableForValue(int index) {
      return applicableFor_.get(index);
    }
    /**
     * <code>repeated .fmsitsinterface.OvertakingInfo.ApplicableVehicleType applicable_for = 1;</code>
     * @param index The index to set the value at.
     * @param value The enum numeric value on the wire for applicableFor to set.
     * @return This builder for chaining.
     */
    public Builder setApplicableForValue(
        int index, int value) {
      ensureApplicableForIsMutable();
      applicableFor_.set(index, value);
      onChanged();
      return this;
    }
    /**
     * <code>repeated .fmsitsinterface.OvertakingInfo.ApplicableVehicleType applicable_for = 1;</code>
     * @param value The enum numeric value on the wire for applicableFor to add.
     * @return This builder for chaining.
     */
    public Builder addApplicableForValue(int value) {
      ensureApplicableForIsMutable();
      applicableFor_.add(value);
      onChanged();
      return this;
    }
    /**
     * <code>repeated .fmsitsinterface.OvertakingInfo.ApplicableVehicleType applicable_for = 1;</code>
     * @param values The enum numeric values on the wire for applicableFor to add.
     * @return This builder for chaining.
     */
    public Builder addAllApplicableForValue(
        java.lang.Iterable<java.lang.Integer> values) {
      ensureApplicableForIsMutable();
      for (int value : values) {
        applicableFor_.add(value);
      }
      onChanged();
      return this;
    }

    private java.util.List<java.lang.Integer> exceptFor_ =
      java.util.Collections.emptyList();
    private void ensureExceptForIsMutable() {
      if (!((bitField0_ & 0x00000002) != 0)) {
        exceptFor_ = new java.util.ArrayList<java.lang.Integer>(exceptFor_);
        bitField0_ |= 0x00000002;
      }
    }
    /**
     * <code>repeated .fmsitsinterface.OvertakingInfo.ApplicableVehicleType except_for = 2;</code>
     * @return A list containing the exceptFor.
     */
    public java.util.List<fmsitsinterface.OvertakingInfo.ApplicableVehicleType> getExceptForList() {
      return new com.google.protobuf.Internal.ListAdapter<
          java.lang.Integer, fmsitsinterface.OvertakingInfo.ApplicableVehicleType>(exceptFor_, exceptFor_converter_);
    }
    /**
     * <code>repeated .fmsitsinterface.OvertakingInfo.ApplicableVehicleType except_for = 2;</code>
     * @return The count of exceptFor.
     */
    public int getExceptForCount() {
      return exceptFor_.size();
    }
    /**
     * <code>repeated .fmsitsinterface.OvertakingInfo.ApplicableVehicleType except_for = 2;</code>
     * @param index The index of the element to return.
     * @return The exceptFor at the given index.
     */
    public fmsitsinterface.OvertakingInfo.ApplicableVehicleType getExceptFor(int index) {
      return exceptFor_converter_.convert(exceptFor_.get(index));
    }
    /**
     * <code>repeated .fmsitsinterface.OvertakingInfo.ApplicableVehicleType except_for = 2;</code>
     * @param index The index to set the value at.
     * @param value The exceptFor to set.
     * @return This builder for chaining.
     */
    public Builder setExceptFor(
        int index, fmsitsinterface.OvertakingInfo.ApplicableVehicleType value) {
      if (value == null) {
        throw new NullPointerException();
      }
      ensureExceptForIsMutable();
      exceptFor_.set(index, value.getNumber());
      onChanged();
      return this;
    }
    /**
     * <code>repeated .fmsitsinterface.OvertakingInfo.ApplicableVehicleType except_for = 2;</code>
     * @param value The exceptFor to add.
     * @return This builder for chaining.
     */
    public Builder addExceptFor(fmsitsinterface.OvertakingInfo.ApplicableVehicleType value) {
      if (value == null) {
        throw new NullPointerException();
      }
      ensureExceptForIsMutable();
      exceptFor_.add(value.getNumber());
      onChanged();
      return this;
    }
    /**
     * <code>repeated .fmsitsinterface.OvertakingInfo.ApplicableVehicleType except_for = 2;</code>
     * @param values The exceptFor to add.
     * @return This builder for chaining.
     */
    public Builder addAllExceptFor(
        java.lang.Iterable<? extends fmsitsinterface.OvertakingInfo.ApplicableVehicleType> values) {
      ensureExceptForIsMutable();
      for (fmsitsinterface.OvertakingInfo.ApplicableVehicleType value : values) {
        exceptFor_.add(value.getNumber());
      }
      onChanged();
      return this;
    }
    /**
     * <code>repeated .fmsitsinterface.OvertakingInfo.ApplicableVehicleType except_for = 2;</code>
     * @return This builder for chaining.
     */
    public Builder clearExceptFor() {
      exceptFor_ = java.util.Collections.emptyList();
      bitField0_ = (bitField0_ & ~0x00000002);
      onChanged();
      return this;
    }
    /**
     * <code>repeated .fmsitsinterface.OvertakingInfo.ApplicableVehicleType except_for = 2;</code>
     * @return A list containing the enum numeric values on the wire for exceptFor.
     */
    public java.util.List<java.lang.Integer>
    getExceptForValueList() {
      return java.util.Collections.unmodifiableList(exceptFor_);
    }
    /**
     * <code>repeated .fmsitsinterface.OvertakingInfo.ApplicableVehicleType except_for = 2;</code>
     * @param index The index of the value to return.
     * @return The enum numeric value on the wire of exceptFor at the given index.
     */
    public int getExceptForValue(int index) {
      return exceptFor_.get(index);
    }
    /**
     * <code>repeated .fmsitsinterface.OvertakingInfo.ApplicableVehicleType except_for = 2;</code>
     * @param index The index to set the value at.
     * @param value The enum numeric value on the wire for exceptFor to set.
     * @return This builder for chaining.
     */
    public Builder setExceptForValue(
        int index, int value) {
      ensureExceptForIsMutable();
      exceptFor_.set(index, value);
      onChanged();
      return this;
    }
    /**
     * <code>repeated .fmsitsinterface.OvertakingInfo.ApplicableVehicleType except_for = 2;</code>
     * @param value The enum numeric value on the wire for exceptFor to add.
     * @return This builder for chaining.
     */
    public Builder addExceptForValue(int value) {
      ensureExceptForIsMutable();
      exceptFor_.add(value);
      onChanged();
      return this;
    }
    /**
     * <code>repeated .fmsitsinterface.OvertakingInfo.ApplicableVehicleType except_for = 2;</code>
     * @param values The enum numeric values on the wire for exceptFor to add.
     * @return This builder for chaining.
     */
    public Builder addAllExceptForValue(
        java.lang.Iterable<java.lang.Integer> values) {
      ensureExceptForIsMutable();
      for (int value : values) {
        exceptFor_.add(value);
      }
      onChanged();
      return this;
    }
    @java.lang.Override
    public final Builder setUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.setUnknownFields(unknownFields);
    }

    @java.lang.Override
    public final Builder mergeUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.mergeUnknownFields(unknownFields);
    }


    // @@protoc_insertion_point(builder_scope:fmsitsinterface.OvertakingInfo)
  }

  // @@protoc_insertion_point(class_scope:fmsitsinterface.OvertakingInfo)
  private static final fmsitsinterface.OvertakingInfo DEFAULT_INSTANCE;
  static {
    DEFAULT_INSTANCE = new fmsitsinterface.OvertakingInfo();
  }

  public static fmsitsinterface.OvertakingInfo getDefaultInstance() {
    return DEFAULT_INSTANCE;
  }

  private static final com.google.protobuf.Parser<OvertakingInfo>
      PARSER = new com.google.protobuf.AbstractParser<OvertakingInfo>() {
    @java.lang.Override
    public OvertakingInfo parsePartialFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      Builder builder = newBuilder();
      try {
        builder.mergeFrom(input, extensionRegistry);
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(builder.buildPartial());
      } catch (com.google.protobuf.UninitializedMessageException e) {
        throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(e)
            .setUnfinishedMessage(builder.buildPartial());
      }
      return builder.buildPartial();
    }
  };

  public static com.google.protobuf.Parser<OvertakingInfo> parser() {
    return PARSER;
  }

  @java.lang.Override
  public com.google.protobuf.Parser<OvertakingInfo> getParserForType() {
    return PARSER;
  }

  @java.lang.Override
  public fmsitsinterface.OvertakingInfo getDefaultInstanceForType() {
    return DEFAULT_INSTANCE;
  }

}

