// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: FMS_ITS_Interface_Specification.proto

package fmsitsinterface;

public interface StaticEventMetadataOrBuilder extends
    // @@protoc_insertion_point(interface_extends:fmsitsinterface.StaticEventMetadata)
    com.google.protobuf.MessageOrBuilder {

  /**
   * <pre>
   * indicating weather events, its_event_code WEATHER_CONDITIONS
   * </pre>
   *
   * <code>.fmsitsinterface.StaticEventMetadata.WeatherConditions weather_conditions = 1;</code>
   * @return The enum numeric value on the wire for weatherConditions.
   */
  int getWeatherConditionsValue();
  /**
   * <pre>
   * indicating weather events, its_event_code WEATHER_CONDITIONS
   * </pre>
   *
   * <code>.fmsitsinterface.StaticEventMetadata.WeatherConditions weather_conditions = 1;</code>
   * @return The weatherConditions.
   */
  fmsitsinterface.StaticEventMetadata.WeatherConditions getWeatherConditions();

  /**
   * <pre>
   * object indicating status of road lanes, its_event_code LANE_CONFIGURATION
   * </pre>
   *
   * <code>.fmsitsinterface.RoadConfiguration road_configuration = 2;</code>
   * @return Whether the roadConfiguration field is set.
   */
  boolean hasRoadConfiguration();
  /**
   * <pre>
   * object indicating status of road lanes, its_event_code LANE_CONFIGURATION
   * </pre>
   *
   * <code>.fmsitsinterface.RoadConfiguration road_configuration = 2;</code>
   * @return The roadConfiguration.
   */
  fmsitsinterface.RoadConfiguration getRoadConfiguration();
  /**
   * <pre>
   * object indicating status of road lanes, its_event_code LANE_CONFIGURATION
   * </pre>
   *
   * <code>.fmsitsinterface.RoadConfiguration road_configuration = 2;</code>
   */
  fmsitsinterface.RoadConfigurationOrBuilder getRoadConfigurationOrBuilder();

  /**
   * <pre>
   * object indicating maximum and optimal speed, its_event_code MAXIMUM_SPEED or ADVISORY_SPEED_LIMIT
   * </pre>
   *
   * <code>.fmsitsinterface.SpeedInfo speed_info = 3;</code>
   * @return Whether the speedInfo field is set.
   */
  boolean hasSpeedInfo();
  /**
   * <pre>
   * object indicating maximum and optimal speed, its_event_code MAXIMUM_SPEED or ADVISORY_SPEED_LIMIT
   * </pre>
   *
   * <code>.fmsitsinterface.SpeedInfo speed_info = 3;</code>
   * @return The speedInfo.
   */
  fmsitsinterface.SpeedInfo getSpeedInfo();
  /**
   * <pre>
   * object indicating maximum and optimal speed, its_event_code MAXIMUM_SPEED or ADVISORY_SPEED_LIMIT
   * </pre>
   *
   * <code>.fmsitsinterface.SpeedInfo speed_info = 3;</code>
   */
  fmsitsinterface.SpeedInfoOrBuilder getSpeedInfoOrBuilder();

  /**
   * <pre>
   * object as placeholder for various traffic light usecases, its_event_code TRAFFIC_LIGHT_STATUS, TRAFFIC_LIGHT_TIMING,  ADVISORY_SPEED, RAIL_CROSSING_STATUS
   * </pre>
   *
   * <code>.fmsitsinterface.IvriContainer ivri_container = 4;</code>
   * @return Whether the ivriContainer field is set.
   */
  boolean hasIvriContainer();
  /**
   * <pre>
   * object as placeholder for various traffic light usecases, its_event_code TRAFFIC_LIGHT_STATUS, TRAFFIC_LIGHT_TIMING,  ADVISORY_SPEED, RAIL_CROSSING_STATUS
   * </pre>
   *
   * <code>.fmsitsinterface.IvriContainer ivri_container = 4;</code>
   * @return The ivriContainer.
   */
  fmsitsinterface.IvriContainer getIvriContainer();
  /**
   * <pre>
   * object as placeholder for various traffic light usecases, its_event_code TRAFFIC_LIGHT_STATUS, TRAFFIC_LIGHT_TIMING,  ADVISORY_SPEED, RAIL_CROSSING_STATUS
   * </pre>
   *
   * <code>.fmsitsinterface.IvriContainer ivri_container = 4;</code>
   */
  fmsitsinterface.IvriContainerOrBuilder getIvriContainerOrBuilder();

  /**
   * <pre>
   * object indicating the lane for which the event is applicable, its_event_code LANE_CONFIGURATION, TRAFFIC_LIGHT_STATUS, TRAFFIC_LIGHT_TIMING
   * </pre>
   *
   * <code>.fmsitsinterface.LaneInfo lane_info = 5;</code>
   * @return Whether the laneInfo field is set.
   */
  boolean hasLaneInfo();
  /**
   * <pre>
   * object indicating the lane for which the event is applicable, its_event_code LANE_CONFIGURATION, TRAFFIC_LIGHT_STATUS, TRAFFIC_LIGHT_TIMING
   * </pre>
   *
   * <code>.fmsitsinterface.LaneInfo lane_info = 5;</code>
   * @return The laneInfo.
   */
  fmsitsinterface.LaneInfo getLaneInfo();
  /**
   * <pre>
   * object indicating the lane for which the event is applicable, its_event_code LANE_CONFIGURATION, TRAFFIC_LIGHT_STATUS, TRAFFIC_LIGHT_TIMING
   * </pre>
   *
   * <code>.fmsitsinterface.LaneInfo lane_info = 5;</code>
   */
  fmsitsinterface.LaneInfoOrBuilder getLaneInfoOrBuilder();

  /**
   * <pre>
   * object as placeholder for usecases from category 5, its_event_code TIRE_PRESSURE_GAUGE, ALTIMETER, WEIGHT, PARKING_OCCUPATION, PARKING_RESERVATION
   * </pre>
   *
   * <code>.fmsitsinterface.SensorInfo sensor_info = 6;</code>
   * @return Whether the sensorInfo field is set.
   */
  boolean hasSensorInfo();
  /**
   * <pre>
   * object as placeholder for usecases from category 5, its_event_code TIRE_PRESSURE_GAUGE, ALTIMETER, WEIGHT, PARKING_OCCUPATION, PARKING_RESERVATION
   * </pre>
   *
   * <code>.fmsitsinterface.SensorInfo sensor_info = 6;</code>
   * @return The sensorInfo.
   */
  fmsitsinterface.SensorInfo getSensorInfo();
  /**
   * <pre>
   * object as placeholder for usecases from category 5, its_event_code TIRE_PRESSURE_GAUGE, ALTIMETER, WEIGHT, PARKING_OCCUPATION, PARKING_RESERVATION
   * </pre>
   *
   * <code>.fmsitsinterface.SensorInfo sensor_info = 6;</code>
   */
  fmsitsinterface.SensorInfoOrBuilder getSensorInfoOrBuilder();

  /**
   * <pre>
   * object with details for an overtaking ban, its_event_code OVERTAKING_BAN
   * </pre>
   *
   * <code>.fmsitsinterface.OvertakingInfo overtaking_info = 7;</code>
   * @return Whether the overtakingInfo field is set.
   */
  boolean hasOvertakingInfo();
  /**
   * <pre>
   * object with details for an overtaking ban, its_event_code OVERTAKING_BAN
   * </pre>
   *
   * <code>.fmsitsinterface.OvertakingInfo overtaking_info = 7;</code>
   * @return The overtakingInfo.
   */
  fmsitsinterface.OvertakingInfo getOvertakingInfo();
  /**
   * <pre>
   * object with details for an overtaking ban, its_event_code OVERTAKING_BAN
   * </pre>
   *
   * <code>.fmsitsinterface.OvertakingInfo overtaking_info = 7;</code>
   */
  fmsitsinterface.OvertakingInfoOrBuilder getOvertakingInfoOrBuilder();
}
