// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: FMS_ITS_Interface_Specification.proto

package fmsitsinterface;

/**
 * Protobuf type {@code fmsitsinterface.TrafficLightTimingInformation}
 */
public final class TrafficLightTimingInformation extends
    com.google.protobuf.GeneratedMessageV3 implements
    // @@protoc_insertion_point(message_implements:fmsitsinterface.TrafficLightTimingInformation)
    TrafficLightTimingInformationOrBuilder {
private static final long serialVersionUID = 0L;
  // Use TrafficLightTimingInformation.newBuilder() to construct.
  private TrafficLightTimingInformation(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
    super(builder);
  }
  private TrafficLightTimingInformation() {
  }

  @java.lang.Override
  @SuppressWarnings({"unused"})
  protected java.lang.Object newInstance(
      UnusedPrivateParameter unused) {
    return new TrafficLightTimingInformation();
  }

  public static final com.google.protobuf.Descriptors.Descriptor
      getDescriptor() {
    return fmsitsinterface.FMSITSInterfaceSpecification.internal_static_fmsitsinterface_TrafficLightTimingInformation_descriptor;
  }

  @java.lang.Override
  protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internalGetFieldAccessorTable() {
    return fmsitsinterface.FMSITSInterfaceSpecification.internal_static_fmsitsinterface_TrafficLightTimingInformation_fieldAccessorTable
        .ensureFieldAccessorsInitialized(
            fmsitsinterface.TrafficLightTimingInformation.class, fmsitsinterface.TrafficLightTimingInformation.Builder.class);
  }

  public static final int MIN_END_TIME_FIELD_NUMBER = 1;
  private com.google.protobuf.Timestamp minEndTime_;
  /**
   * <pre>
   * The element minEndTime is used to convey the earliest time possible at which the phase could change, except when unpredictable events relating to a pre-emption or priority call disrupt a currently active timing plan. (UTC+00:00).
   * </pre>
   *
   * <code>.google.protobuf.Timestamp min_end_time = 1;</code>
   * @return Whether the minEndTime field is set.
   */
  @java.lang.Override
  public boolean hasMinEndTime() {
    return minEndTime_ != null;
  }
  /**
   * <pre>
   * The element minEndTime is used to convey the earliest time possible at which the phase could change, except when unpredictable events relating to a pre-emption or priority call disrupt a currently active timing plan. (UTC+00:00).
   * </pre>
   *
   * <code>.google.protobuf.Timestamp min_end_time = 1;</code>
   * @return The minEndTime.
   */
  @java.lang.Override
  public com.google.protobuf.Timestamp getMinEndTime() {
    return minEndTime_ == null ? com.google.protobuf.Timestamp.getDefaultInstance() : minEndTime_;
  }
  /**
   * <pre>
   * The element minEndTime is used to convey the earliest time possible at which the phase could change, except when unpredictable events relating to a pre-emption or priority call disrupt a currently active timing plan. (UTC+00:00).
   * </pre>
   *
   * <code>.google.protobuf.Timestamp min_end_time = 1;</code>
   */
  @java.lang.Override
  public com.google.protobuf.TimestampOrBuilder getMinEndTimeOrBuilder() {
    return minEndTime_ == null ? com.google.protobuf.Timestamp.getDefaultInstance() : minEndTime_;
  }

  public static final int MAX_END_TIME_FIELD_NUMBER = 2;
  private com.google.protobuf.Timestamp maxEndTime_;
  /**
   * <pre>
   * The element MaxEndTime is used to convey the latest time possible which the phase could change, except when unpredictable events relating to a pre-emption or priority call come into play and disrupt a currently active timing plan. (UTC+00:00)"
   * </pre>
   *
   * <code>.google.protobuf.Timestamp max_end_time = 2;</code>
   * @return Whether the maxEndTime field is set.
   */
  @java.lang.Override
  public boolean hasMaxEndTime() {
    return maxEndTime_ != null;
  }
  /**
   * <pre>
   * The element MaxEndTime is used to convey the latest time possible which the phase could change, except when unpredictable events relating to a pre-emption or priority call come into play and disrupt a currently active timing plan. (UTC+00:00)"
   * </pre>
   *
   * <code>.google.protobuf.Timestamp max_end_time = 2;</code>
   * @return The maxEndTime.
   */
  @java.lang.Override
  public com.google.protobuf.Timestamp getMaxEndTime() {
    return maxEndTime_ == null ? com.google.protobuf.Timestamp.getDefaultInstance() : maxEndTime_;
  }
  /**
   * <pre>
   * The element MaxEndTime is used to convey the latest time possible which the phase could change, except when unpredictable events relating to a pre-emption or priority call come into play and disrupt a currently active timing plan. (UTC+00:00)"
   * </pre>
   *
   * <code>.google.protobuf.Timestamp max_end_time = 2;</code>
   */
  @java.lang.Override
  public com.google.protobuf.TimestampOrBuilder getMaxEndTimeOrBuilder() {
    return maxEndTime_ == null ? com.google.protobuf.Timestamp.getDefaultInstance() : maxEndTime_;
  }

  public static final int LIKELY_TIME_FIELD_NUMBER = 3;
  private com.google.protobuf.Timestamp likelyTime_;
  /**
   * <pre>
   * The element likelyTime is used to convey the most likely time the phase changes. This occurs between MinEndTime and MaxEndTime and is only relevant for traffic-actuated control programs. (UTC+00:00).
   * </pre>
   *
   * <code>.google.protobuf.Timestamp likely_time = 3;</code>
   * @return Whether the likelyTime field is set.
   */
  @java.lang.Override
  public boolean hasLikelyTime() {
    return likelyTime_ != null;
  }
  /**
   * <pre>
   * The element likelyTime is used to convey the most likely time the phase changes. This occurs between MinEndTime and MaxEndTime and is only relevant for traffic-actuated control programs. (UTC+00:00).
   * </pre>
   *
   * <code>.google.protobuf.Timestamp likely_time = 3;</code>
   * @return The likelyTime.
   */
  @java.lang.Override
  public com.google.protobuf.Timestamp getLikelyTime() {
    return likelyTime_ == null ? com.google.protobuf.Timestamp.getDefaultInstance() : likelyTime_;
  }
  /**
   * <pre>
   * The element likelyTime is used to convey the most likely time the phase changes. This occurs between MinEndTime and MaxEndTime and is only relevant for traffic-actuated control programs. (UTC+00:00).
   * </pre>
   *
   * <code>.google.protobuf.Timestamp likely_time = 3;</code>
   */
  @java.lang.Override
  public com.google.protobuf.TimestampOrBuilder getLikelyTimeOrBuilder() {
    return likelyTime_ == null ? com.google.protobuf.Timestamp.getDefaultInstance() : likelyTime_;
  }

  private byte memoizedIsInitialized = -1;
  @java.lang.Override
  public final boolean isInitialized() {
    byte isInitialized = memoizedIsInitialized;
    if (isInitialized == 1) return true;
    if (isInitialized == 0) return false;

    memoizedIsInitialized = 1;
    return true;
  }

  @java.lang.Override
  public void writeTo(com.google.protobuf.CodedOutputStream output)
                      throws java.io.IOException {
    if (minEndTime_ != null) {
      output.writeMessage(1, getMinEndTime());
    }
    if (maxEndTime_ != null) {
      output.writeMessage(2, getMaxEndTime());
    }
    if (likelyTime_ != null) {
      output.writeMessage(3, getLikelyTime());
    }
    getUnknownFields().writeTo(output);
  }

  @java.lang.Override
  public int getSerializedSize() {
    int size = memoizedSize;
    if (size != -1) return size;

    size = 0;
    if (minEndTime_ != null) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(1, getMinEndTime());
    }
    if (maxEndTime_ != null) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(2, getMaxEndTime());
    }
    if (likelyTime_ != null) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(3, getLikelyTime());
    }
    size += getUnknownFields().getSerializedSize();
    memoizedSize = size;
    return size;
  }

  @java.lang.Override
  public boolean equals(final java.lang.Object obj) {
    if (obj == this) {
     return true;
    }
    if (!(obj instanceof fmsitsinterface.TrafficLightTimingInformation)) {
      return super.equals(obj);
    }
    fmsitsinterface.TrafficLightTimingInformation other = (fmsitsinterface.TrafficLightTimingInformation) obj;

    if (hasMinEndTime() != other.hasMinEndTime()) return false;
    if (hasMinEndTime()) {
      if (!getMinEndTime()
          .equals(other.getMinEndTime())) return false;
    }
    if (hasMaxEndTime() != other.hasMaxEndTime()) return false;
    if (hasMaxEndTime()) {
      if (!getMaxEndTime()
          .equals(other.getMaxEndTime())) return false;
    }
    if (hasLikelyTime() != other.hasLikelyTime()) return false;
    if (hasLikelyTime()) {
      if (!getLikelyTime()
          .equals(other.getLikelyTime())) return false;
    }
    if (!getUnknownFields().equals(other.getUnknownFields())) return false;
    return true;
  }

  @java.lang.Override
  public int hashCode() {
    if (memoizedHashCode != 0) {
      return memoizedHashCode;
    }
    int hash = 41;
    hash = (19 * hash) + getDescriptor().hashCode();
    if (hasMinEndTime()) {
      hash = (37 * hash) + MIN_END_TIME_FIELD_NUMBER;
      hash = (53 * hash) + getMinEndTime().hashCode();
    }
    if (hasMaxEndTime()) {
      hash = (37 * hash) + MAX_END_TIME_FIELD_NUMBER;
      hash = (53 * hash) + getMaxEndTime().hashCode();
    }
    if (hasLikelyTime()) {
      hash = (37 * hash) + LIKELY_TIME_FIELD_NUMBER;
      hash = (53 * hash) + getLikelyTime().hashCode();
    }
    hash = (29 * hash) + getUnknownFields().hashCode();
    memoizedHashCode = hash;
    return hash;
  }

  public static fmsitsinterface.TrafficLightTimingInformation parseFrom(
      java.nio.ByteBuffer data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static fmsitsinterface.TrafficLightTimingInformation parseFrom(
      java.nio.ByteBuffer data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static fmsitsinterface.TrafficLightTimingInformation parseFrom(
      com.google.protobuf.ByteString data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static fmsitsinterface.TrafficLightTimingInformation parseFrom(
      com.google.protobuf.ByteString data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static fmsitsinterface.TrafficLightTimingInformation parseFrom(byte[] data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static fmsitsinterface.TrafficLightTimingInformation parseFrom(
      byte[] data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static fmsitsinterface.TrafficLightTimingInformation parseFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static fmsitsinterface.TrafficLightTimingInformation parseFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }

  public static fmsitsinterface.TrafficLightTimingInformation parseDelimitedFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input);
  }

  public static fmsitsinterface.TrafficLightTimingInformation parseDelimitedFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
  }
  public static fmsitsinterface.TrafficLightTimingInformation parseFrom(
      com.google.protobuf.CodedInputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static fmsitsinterface.TrafficLightTimingInformation parseFrom(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }

  @java.lang.Override
  public Builder newBuilderForType() { return newBuilder(); }
  public static Builder newBuilder() {
    return DEFAULT_INSTANCE.toBuilder();
  }
  public static Builder newBuilder(fmsitsinterface.TrafficLightTimingInformation prototype) {
    return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
  }
  @java.lang.Override
  public Builder toBuilder() {
    return this == DEFAULT_INSTANCE
        ? new Builder() : new Builder().mergeFrom(this);
  }

  @java.lang.Override
  protected Builder newBuilderForType(
      com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
    Builder builder = new Builder(parent);
    return builder;
  }
  /**
   * Protobuf type {@code fmsitsinterface.TrafficLightTimingInformation}
   */
  public static final class Builder extends
      com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
      // @@protoc_insertion_point(builder_implements:fmsitsinterface.TrafficLightTimingInformation)
      fmsitsinterface.TrafficLightTimingInformationOrBuilder {
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return fmsitsinterface.FMSITSInterfaceSpecification.internal_static_fmsitsinterface_TrafficLightTimingInformation_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return fmsitsinterface.FMSITSInterfaceSpecification.internal_static_fmsitsinterface_TrafficLightTimingInformation_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              fmsitsinterface.TrafficLightTimingInformation.class, fmsitsinterface.TrafficLightTimingInformation.Builder.class);
    }

    // Construct using fmsitsinterface.TrafficLightTimingInformation.newBuilder()
    private Builder() {

    }

    private Builder(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      super(parent);

    }
    @java.lang.Override
    public Builder clear() {
      super.clear();
      bitField0_ = 0;
      minEndTime_ = null;
      if (minEndTimeBuilder_ != null) {
        minEndTimeBuilder_.dispose();
        minEndTimeBuilder_ = null;
      }
      maxEndTime_ = null;
      if (maxEndTimeBuilder_ != null) {
        maxEndTimeBuilder_.dispose();
        maxEndTimeBuilder_ = null;
      }
      likelyTime_ = null;
      if (likelyTimeBuilder_ != null) {
        likelyTimeBuilder_.dispose();
        likelyTimeBuilder_ = null;
      }
      return this;
    }

    @java.lang.Override
    public com.google.protobuf.Descriptors.Descriptor
        getDescriptorForType() {
      return fmsitsinterface.FMSITSInterfaceSpecification.internal_static_fmsitsinterface_TrafficLightTimingInformation_descriptor;
    }

    @java.lang.Override
    public fmsitsinterface.TrafficLightTimingInformation getDefaultInstanceForType() {
      return fmsitsinterface.TrafficLightTimingInformation.getDefaultInstance();
    }

    @java.lang.Override
    public fmsitsinterface.TrafficLightTimingInformation build() {
      fmsitsinterface.TrafficLightTimingInformation result = buildPartial();
      if (!result.isInitialized()) {
        throw newUninitializedMessageException(result);
      }
      return result;
    }

    @java.lang.Override
    public fmsitsinterface.TrafficLightTimingInformation buildPartial() {
      fmsitsinterface.TrafficLightTimingInformation result = new fmsitsinterface.TrafficLightTimingInformation(this);
      if (bitField0_ != 0) { buildPartial0(result); }
      onBuilt();
      return result;
    }

    private void buildPartial0(fmsitsinterface.TrafficLightTimingInformation result) {
      int from_bitField0_ = bitField0_;
      if (((from_bitField0_ & 0x00000001) != 0)) {
        result.minEndTime_ = minEndTimeBuilder_ == null
            ? minEndTime_
            : minEndTimeBuilder_.build();
      }
      if (((from_bitField0_ & 0x00000002) != 0)) {
        result.maxEndTime_ = maxEndTimeBuilder_ == null
            ? maxEndTime_
            : maxEndTimeBuilder_.build();
      }
      if (((from_bitField0_ & 0x00000004) != 0)) {
        result.likelyTime_ = likelyTimeBuilder_ == null
            ? likelyTime_
            : likelyTimeBuilder_.build();
      }
    }

    @java.lang.Override
    public Builder clone() {
      return super.clone();
    }
    @java.lang.Override
    public Builder setField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        java.lang.Object value) {
      return super.setField(field, value);
    }
    @java.lang.Override
    public Builder clearField(
        com.google.protobuf.Descriptors.FieldDescriptor field) {
      return super.clearField(field);
    }
    @java.lang.Override
    public Builder clearOneof(
        com.google.protobuf.Descriptors.OneofDescriptor oneof) {
      return super.clearOneof(oneof);
    }
    @java.lang.Override
    public Builder setRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        int index, java.lang.Object value) {
      return super.setRepeatedField(field, index, value);
    }
    @java.lang.Override
    public Builder addRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        java.lang.Object value) {
      return super.addRepeatedField(field, value);
    }
    @java.lang.Override
    public Builder mergeFrom(com.google.protobuf.Message other) {
      if (other instanceof fmsitsinterface.TrafficLightTimingInformation) {
        return mergeFrom((fmsitsinterface.TrafficLightTimingInformation)other);
      } else {
        super.mergeFrom(other);
        return this;
      }
    }

    public Builder mergeFrom(fmsitsinterface.TrafficLightTimingInformation other) {
      if (other == fmsitsinterface.TrafficLightTimingInformation.getDefaultInstance()) return this;
      if (other.hasMinEndTime()) {
        mergeMinEndTime(other.getMinEndTime());
      }
      if (other.hasMaxEndTime()) {
        mergeMaxEndTime(other.getMaxEndTime());
      }
      if (other.hasLikelyTime()) {
        mergeLikelyTime(other.getLikelyTime());
      }
      this.mergeUnknownFields(other.getUnknownFields());
      onChanged();
      return this;
    }

    @java.lang.Override
    public final boolean isInitialized() {
      return true;
    }

    @java.lang.Override
    public Builder mergeFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 10: {
              input.readMessage(
                  getMinEndTimeFieldBuilder().getBuilder(),
                  extensionRegistry);
              bitField0_ |= 0x00000001;
              break;
            } // case 10
            case 18: {
              input.readMessage(
                  getMaxEndTimeFieldBuilder().getBuilder(),
                  extensionRegistry);
              bitField0_ |= 0x00000002;
              break;
            } // case 18
            case 26: {
              input.readMessage(
                  getLikelyTimeFieldBuilder().getBuilder(),
                  extensionRegistry);
              bitField0_ |= 0x00000004;
              break;
            } // case 26
            default: {
              if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                done = true; // was an endgroup tag
              }
              break;
            } // default:
          } // switch (tag)
        } // while (!done)
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.unwrapIOException();
      } finally {
        onChanged();
      } // finally
      return this;
    }
    private int bitField0_;

    private com.google.protobuf.Timestamp minEndTime_;
    private com.google.protobuf.SingleFieldBuilderV3<
        com.google.protobuf.Timestamp, com.google.protobuf.Timestamp.Builder, com.google.protobuf.TimestampOrBuilder> minEndTimeBuilder_;
    /**
     * <pre>
     * The element minEndTime is used to convey the earliest time possible at which the phase could change, except when unpredictable events relating to a pre-emption or priority call disrupt a currently active timing plan. (UTC+00:00).
     * </pre>
     *
     * <code>.google.protobuf.Timestamp min_end_time = 1;</code>
     * @return Whether the minEndTime field is set.
     */
    public boolean hasMinEndTime() {
      return ((bitField0_ & 0x00000001) != 0);
    }
    /**
     * <pre>
     * The element minEndTime is used to convey the earliest time possible at which the phase could change, except when unpredictable events relating to a pre-emption or priority call disrupt a currently active timing plan. (UTC+00:00).
     * </pre>
     *
     * <code>.google.protobuf.Timestamp min_end_time = 1;</code>
     * @return The minEndTime.
     */
    public com.google.protobuf.Timestamp getMinEndTime() {
      if (minEndTimeBuilder_ == null) {
        return minEndTime_ == null ? com.google.protobuf.Timestamp.getDefaultInstance() : minEndTime_;
      } else {
        return minEndTimeBuilder_.getMessage();
      }
    }
    /**
     * <pre>
     * The element minEndTime is used to convey the earliest time possible at which the phase could change, except when unpredictable events relating to a pre-emption or priority call disrupt a currently active timing plan. (UTC+00:00).
     * </pre>
     *
     * <code>.google.protobuf.Timestamp min_end_time = 1;</code>
     */
    public Builder setMinEndTime(com.google.protobuf.Timestamp value) {
      if (minEndTimeBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        minEndTime_ = value;
      } else {
        minEndTimeBuilder_.setMessage(value);
      }
      bitField0_ |= 0x00000001;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * The element minEndTime is used to convey the earliest time possible at which the phase could change, except when unpredictable events relating to a pre-emption or priority call disrupt a currently active timing plan. (UTC+00:00).
     * </pre>
     *
     * <code>.google.protobuf.Timestamp min_end_time = 1;</code>
     */
    public Builder setMinEndTime(
        com.google.protobuf.Timestamp.Builder builderForValue) {
      if (minEndTimeBuilder_ == null) {
        minEndTime_ = builderForValue.build();
      } else {
        minEndTimeBuilder_.setMessage(builderForValue.build());
      }
      bitField0_ |= 0x00000001;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * The element minEndTime is used to convey the earliest time possible at which the phase could change, except when unpredictable events relating to a pre-emption or priority call disrupt a currently active timing plan. (UTC+00:00).
     * </pre>
     *
     * <code>.google.protobuf.Timestamp min_end_time = 1;</code>
     */
    public Builder mergeMinEndTime(com.google.protobuf.Timestamp value) {
      if (minEndTimeBuilder_ == null) {
        if (((bitField0_ & 0x00000001) != 0) &&
          minEndTime_ != null &&
          minEndTime_ != com.google.protobuf.Timestamp.getDefaultInstance()) {
          getMinEndTimeBuilder().mergeFrom(value);
        } else {
          minEndTime_ = value;
        }
      } else {
        minEndTimeBuilder_.mergeFrom(value);
      }
      bitField0_ |= 0x00000001;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * The element minEndTime is used to convey the earliest time possible at which the phase could change, except when unpredictable events relating to a pre-emption or priority call disrupt a currently active timing plan. (UTC+00:00).
     * </pre>
     *
     * <code>.google.protobuf.Timestamp min_end_time = 1;</code>
     */
    public Builder clearMinEndTime() {
      bitField0_ = (bitField0_ & ~0x00000001);
      minEndTime_ = null;
      if (minEndTimeBuilder_ != null) {
        minEndTimeBuilder_.dispose();
        minEndTimeBuilder_ = null;
      }
      onChanged();
      return this;
    }
    /**
     * <pre>
     * The element minEndTime is used to convey the earliest time possible at which the phase could change, except when unpredictable events relating to a pre-emption or priority call disrupt a currently active timing plan. (UTC+00:00).
     * </pre>
     *
     * <code>.google.protobuf.Timestamp min_end_time = 1;</code>
     */
    public com.google.protobuf.Timestamp.Builder getMinEndTimeBuilder() {
      bitField0_ |= 0x00000001;
      onChanged();
      return getMinEndTimeFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * The element minEndTime is used to convey the earliest time possible at which the phase could change, except when unpredictable events relating to a pre-emption or priority call disrupt a currently active timing plan. (UTC+00:00).
     * </pre>
     *
     * <code>.google.protobuf.Timestamp min_end_time = 1;</code>
     */
    public com.google.protobuf.TimestampOrBuilder getMinEndTimeOrBuilder() {
      if (minEndTimeBuilder_ != null) {
        return minEndTimeBuilder_.getMessageOrBuilder();
      } else {
        return minEndTime_ == null ?
            com.google.protobuf.Timestamp.getDefaultInstance() : minEndTime_;
      }
    }
    /**
     * <pre>
     * The element minEndTime is used to convey the earliest time possible at which the phase could change, except when unpredictable events relating to a pre-emption or priority call disrupt a currently active timing plan. (UTC+00:00).
     * </pre>
     *
     * <code>.google.protobuf.Timestamp min_end_time = 1;</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        com.google.protobuf.Timestamp, com.google.protobuf.Timestamp.Builder, com.google.protobuf.TimestampOrBuilder> 
        getMinEndTimeFieldBuilder() {
      if (minEndTimeBuilder_ == null) {
        minEndTimeBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            com.google.protobuf.Timestamp, com.google.protobuf.Timestamp.Builder, com.google.protobuf.TimestampOrBuilder>(
                getMinEndTime(),
                getParentForChildren(),
                isClean());
        minEndTime_ = null;
      }
      return minEndTimeBuilder_;
    }

    private com.google.protobuf.Timestamp maxEndTime_;
    private com.google.protobuf.SingleFieldBuilderV3<
        com.google.protobuf.Timestamp, com.google.protobuf.Timestamp.Builder, com.google.protobuf.TimestampOrBuilder> maxEndTimeBuilder_;
    /**
     * <pre>
     * The element MaxEndTime is used to convey the latest time possible which the phase could change, except when unpredictable events relating to a pre-emption or priority call come into play and disrupt a currently active timing plan. (UTC+00:00)"
     * </pre>
     *
     * <code>.google.protobuf.Timestamp max_end_time = 2;</code>
     * @return Whether the maxEndTime field is set.
     */
    public boolean hasMaxEndTime() {
      return ((bitField0_ & 0x00000002) != 0);
    }
    /**
     * <pre>
     * The element MaxEndTime is used to convey the latest time possible which the phase could change, except when unpredictable events relating to a pre-emption or priority call come into play and disrupt a currently active timing plan. (UTC+00:00)"
     * </pre>
     *
     * <code>.google.protobuf.Timestamp max_end_time = 2;</code>
     * @return The maxEndTime.
     */
    public com.google.protobuf.Timestamp getMaxEndTime() {
      if (maxEndTimeBuilder_ == null) {
        return maxEndTime_ == null ? com.google.protobuf.Timestamp.getDefaultInstance() : maxEndTime_;
      } else {
        return maxEndTimeBuilder_.getMessage();
      }
    }
    /**
     * <pre>
     * The element MaxEndTime is used to convey the latest time possible which the phase could change, except when unpredictable events relating to a pre-emption or priority call come into play and disrupt a currently active timing plan. (UTC+00:00)"
     * </pre>
     *
     * <code>.google.protobuf.Timestamp max_end_time = 2;</code>
     */
    public Builder setMaxEndTime(com.google.protobuf.Timestamp value) {
      if (maxEndTimeBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        maxEndTime_ = value;
      } else {
        maxEndTimeBuilder_.setMessage(value);
      }
      bitField0_ |= 0x00000002;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * The element MaxEndTime is used to convey the latest time possible which the phase could change, except when unpredictable events relating to a pre-emption or priority call come into play and disrupt a currently active timing plan. (UTC+00:00)"
     * </pre>
     *
     * <code>.google.protobuf.Timestamp max_end_time = 2;</code>
     */
    public Builder setMaxEndTime(
        com.google.protobuf.Timestamp.Builder builderForValue) {
      if (maxEndTimeBuilder_ == null) {
        maxEndTime_ = builderForValue.build();
      } else {
        maxEndTimeBuilder_.setMessage(builderForValue.build());
      }
      bitField0_ |= 0x00000002;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * The element MaxEndTime is used to convey the latest time possible which the phase could change, except when unpredictable events relating to a pre-emption or priority call come into play and disrupt a currently active timing plan. (UTC+00:00)"
     * </pre>
     *
     * <code>.google.protobuf.Timestamp max_end_time = 2;</code>
     */
    public Builder mergeMaxEndTime(com.google.protobuf.Timestamp value) {
      if (maxEndTimeBuilder_ == null) {
        if (((bitField0_ & 0x00000002) != 0) &&
          maxEndTime_ != null &&
          maxEndTime_ != com.google.protobuf.Timestamp.getDefaultInstance()) {
          getMaxEndTimeBuilder().mergeFrom(value);
        } else {
          maxEndTime_ = value;
        }
      } else {
        maxEndTimeBuilder_.mergeFrom(value);
      }
      bitField0_ |= 0x00000002;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * The element MaxEndTime is used to convey the latest time possible which the phase could change, except when unpredictable events relating to a pre-emption or priority call come into play and disrupt a currently active timing plan. (UTC+00:00)"
     * </pre>
     *
     * <code>.google.protobuf.Timestamp max_end_time = 2;</code>
     */
    public Builder clearMaxEndTime() {
      bitField0_ = (bitField0_ & ~0x00000002);
      maxEndTime_ = null;
      if (maxEndTimeBuilder_ != null) {
        maxEndTimeBuilder_.dispose();
        maxEndTimeBuilder_ = null;
      }
      onChanged();
      return this;
    }
    /**
     * <pre>
     * The element MaxEndTime is used to convey the latest time possible which the phase could change, except when unpredictable events relating to a pre-emption or priority call come into play and disrupt a currently active timing plan. (UTC+00:00)"
     * </pre>
     *
     * <code>.google.protobuf.Timestamp max_end_time = 2;</code>
     */
    public com.google.protobuf.Timestamp.Builder getMaxEndTimeBuilder() {
      bitField0_ |= 0x00000002;
      onChanged();
      return getMaxEndTimeFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * The element MaxEndTime is used to convey the latest time possible which the phase could change, except when unpredictable events relating to a pre-emption or priority call come into play and disrupt a currently active timing plan. (UTC+00:00)"
     * </pre>
     *
     * <code>.google.protobuf.Timestamp max_end_time = 2;</code>
     */
    public com.google.protobuf.TimestampOrBuilder getMaxEndTimeOrBuilder() {
      if (maxEndTimeBuilder_ != null) {
        return maxEndTimeBuilder_.getMessageOrBuilder();
      } else {
        return maxEndTime_ == null ?
            com.google.protobuf.Timestamp.getDefaultInstance() : maxEndTime_;
      }
    }
    /**
     * <pre>
     * The element MaxEndTime is used to convey the latest time possible which the phase could change, except when unpredictable events relating to a pre-emption or priority call come into play and disrupt a currently active timing plan. (UTC+00:00)"
     * </pre>
     *
     * <code>.google.protobuf.Timestamp max_end_time = 2;</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        com.google.protobuf.Timestamp, com.google.protobuf.Timestamp.Builder, com.google.protobuf.TimestampOrBuilder> 
        getMaxEndTimeFieldBuilder() {
      if (maxEndTimeBuilder_ == null) {
        maxEndTimeBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            com.google.protobuf.Timestamp, com.google.protobuf.Timestamp.Builder, com.google.protobuf.TimestampOrBuilder>(
                getMaxEndTime(),
                getParentForChildren(),
                isClean());
        maxEndTime_ = null;
      }
      return maxEndTimeBuilder_;
    }

    private com.google.protobuf.Timestamp likelyTime_;
    private com.google.protobuf.SingleFieldBuilderV3<
        com.google.protobuf.Timestamp, com.google.protobuf.Timestamp.Builder, com.google.protobuf.TimestampOrBuilder> likelyTimeBuilder_;
    /**
     * <pre>
     * The element likelyTime is used to convey the most likely time the phase changes. This occurs between MinEndTime and MaxEndTime and is only relevant for traffic-actuated control programs. (UTC+00:00).
     * </pre>
     *
     * <code>.google.protobuf.Timestamp likely_time = 3;</code>
     * @return Whether the likelyTime field is set.
     */
    public boolean hasLikelyTime() {
      return ((bitField0_ & 0x00000004) != 0);
    }
    /**
     * <pre>
     * The element likelyTime is used to convey the most likely time the phase changes. This occurs between MinEndTime and MaxEndTime and is only relevant for traffic-actuated control programs. (UTC+00:00).
     * </pre>
     *
     * <code>.google.protobuf.Timestamp likely_time = 3;</code>
     * @return The likelyTime.
     */
    public com.google.protobuf.Timestamp getLikelyTime() {
      if (likelyTimeBuilder_ == null) {
        return likelyTime_ == null ? com.google.protobuf.Timestamp.getDefaultInstance() : likelyTime_;
      } else {
        return likelyTimeBuilder_.getMessage();
      }
    }
    /**
     * <pre>
     * The element likelyTime is used to convey the most likely time the phase changes. This occurs between MinEndTime and MaxEndTime and is only relevant for traffic-actuated control programs. (UTC+00:00).
     * </pre>
     *
     * <code>.google.protobuf.Timestamp likely_time = 3;</code>
     */
    public Builder setLikelyTime(com.google.protobuf.Timestamp value) {
      if (likelyTimeBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        likelyTime_ = value;
      } else {
        likelyTimeBuilder_.setMessage(value);
      }
      bitField0_ |= 0x00000004;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * The element likelyTime is used to convey the most likely time the phase changes. This occurs between MinEndTime and MaxEndTime and is only relevant for traffic-actuated control programs. (UTC+00:00).
     * </pre>
     *
     * <code>.google.protobuf.Timestamp likely_time = 3;</code>
     */
    public Builder setLikelyTime(
        com.google.protobuf.Timestamp.Builder builderForValue) {
      if (likelyTimeBuilder_ == null) {
        likelyTime_ = builderForValue.build();
      } else {
        likelyTimeBuilder_.setMessage(builderForValue.build());
      }
      bitField0_ |= 0x00000004;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * The element likelyTime is used to convey the most likely time the phase changes. This occurs between MinEndTime and MaxEndTime and is only relevant for traffic-actuated control programs. (UTC+00:00).
     * </pre>
     *
     * <code>.google.protobuf.Timestamp likely_time = 3;</code>
     */
    public Builder mergeLikelyTime(com.google.protobuf.Timestamp value) {
      if (likelyTimeBuilder_ == null) {
        if (((bitField0_ & 0x00000004) != 0) &&
          likelyTime_ != null &&
          likelyTime_ != com.google.protobuf.Timestamp.getDefaultInstance()) {
          getLikelyTimeBuilder().mergeFrom(value);
        } else {
          likelyTime_ = value;
        }
      } else {
        likelyTimeBuilder_.mergeFrom(value);
      }
      bitField0_ |= 0x00000004;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * The element likelyTime is used to convey the most likely time the phase changes. This occurs between MinEndTime and MaxEndTime and is only relevant for traffic-actuated control programs. (UTC+00:00).
     * </pre>
     *
     * <code>.google.protobuf.Timestamp likely_time = 3;</code>
     */
    public Builder clearLikelyTime() {
      bitField0_ = (bitField0_ & ~0x00000004);
      likelyTime_ = null;
      if (likelyTimeBuilder_ != null) {
        likelyTimeBuilder_.dispose();
        likelyTimeBuilder_ = null;
      }
      onChanged();
      return this;
    }
    /**
     * <pre>
     * The element likelyTime is used to convey the most likely time the phase changes. This occurs between MinEndTime and MaxEndTime and is only relevant for traffic-actuated control programs. (UTC+00:00).
     * </pre>
     *
     * <code>.google.protobuf.Timestamp likely_time = 3;</code>
     */
    public com.google.protobuf.Timestamp.Builder getLikelyTimeBuilder() {
      bitField0_ |= 0x00000004;
      onChanged();
      return getLikelyTimeFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * The element likelyTime is used to convey the most likely time the phase changes. This occurs between MinEndTime and MaxEndTime and is only relevant for traffic-actuated control programs. (UTC+00:00).
     * </pre>
     *
     * <code>.google.protobuf.Timestamp likely_time = 3;</code>
     */
    public com.google.protobuf.TimestampOrBuilder getLikelyTimeOrBuilder() {
      if (likelyTimeBuilder_ != null) {
        return likelyTimeBuilder_.getMessageOrBuilder();
      } else {
        return likelyTime_ == null ?
            com.google.protobuf.Timestamp.getDefaultInstance() : likelyTime_;
      }
    }
    /**
     * <pre>
     * The element likelyTime is used to convey the most likely time the phase changes. This occurs between MinEndTime and MaxEndTime and is only relevant for traffic-actuated control programs. (UTC+00:00).
     * </pre>
     *
     * <code>.google.protobuf.Timestamp likely_time = 3;</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        com.google.protobuf.Timestamp, com.google.protobuf.Timestamp.Builder, com.google.protobuf.TimestampOrBuilder> 
        getLikelyTimeFieldBuilder() {
      if (likelyTimeBuilder_ == null) {
        likelyTimeBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            com.google.protobuf.Timestamp, com.google.protobuf.Timestamp.Builder, com.google.protobuf.TimestampOrBuilder>(
                getLikelyTime(),
                getParentForChildren(),
                isClean());
        likelyTime_ = null;
      }
      return likelyTimeBuilder_;
    }
    @java.lang.Override
    public final Builder setUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.setUnknownFields(unknownFields);
    }

    @java.lang.Override
    public final Builder mergeUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.mergeUnknownFields(unknownFields);
    }


    // @@protoc_insertion_point(builder_scope:fmsitsinterface.TrafficLightTimingInformation)
  }

  // @@protoc_insertion_point(class_scope:fmsitsinterface.TrafficLightTimingInformation)
  private static final fmsitsinterface.TrafficLightTimingInformation DEFAULT_INSTANCE;
  static {
    DEFAULT_INSTANCE = new fmsitsinterface.TrafficLightTimingInformation();
  }

  public static fmsitsinterface.TrafficLightTimingInformation getDefaultInstance() {
    return DEFAULT_INSTANCE;
  }

  private static final com.google.protobuf.Parser<TrafficLightTimingInformation>
      PARSER = new com.google.protobuf.AbstractParser<TrafficLightTimingInformation>() {
    @java.lang.Override
    public TrafficLightTimingInformation parsePartialFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      Builder builder = newBuilder();
      try {
        builder.mergeFrom(input, extensionRegistry);
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(builder.buildPartial());
      } catch (com.google.protobuf.UninitializedMessageException e) {
        throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(e)
            .setUnfinishedMessage(builder.buildPartial());
      }
      return builder.buildPartial();
    }
  };

  public static com.google.protobuf.Parser<TrafficLightTimingInformation> parser() {
    return PARSER;
  }

  @java.lang.Override
  public com.google.protobuf.Parser<TrafficLightTimingInformation> getParserForType() {
    return PARSER;
  }

  @java.lang.Override
  public fmsitsinterface.TrafficLightTimingInformation getDefaultInstanceForType() {
    return DEFAULT_INSTANCE;
  }

}

